        -:    0:Source:damage.c
        -:    0:Graph:damage.gcno
        -:    0:Data:damage.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdbool.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <stdio.h>
        -:    4:#include "object.h"
        -:    5:#include "misc.h"
        -:    6:
        3:    7:static void describeAttack(OBJECT *attacker, OBJECT *victim, OBJECT *weapon)
        -:    8:{
        3:    9:   const char *weaponDescription = weapon == attacker ? "bare hands"
        2:   10:                                                      : weapon->description;
        3:   11:   if (attacker == player)
        -:   12:   {
        2:   13:      printf("You hit %s with %s.\n", victim->description, weaponDescription);
        2:   14:   }
        1:   15:   else if (victim == player)
        -:   16:   {
        1:   17:      printf("You are hit by %s with %s.\n",
        1:   18:             attacker->description, weaponDescription);
        1:   19:   }
        -:   20:   else
        -:   21:   {
    #####:   22:      printf("You see %s hit %s with %s.\n",
    #####:   23:             attacker->description, victim->description, weaponDescription);
        -:   24:   }
        3:   25:}
        -:   26:
    #####:   27:static void describeDeath(OBJECT *victim)
        -:   28:{
    #####:   29:   if (victim == player)
        -:   30:   {
    #####:   31:      printf("You die.\n");
    #####:   32:   }
        -:   33:   else
        -:   34:   {
    #####:   35:      printf("You see %s die.\n", victim->description);
        -:   36:   }
    #####:   37:}
        -:   38:
        4:   39:void dealDamage(OBJECT *attacker, OBJECT *weapon, OBJECT *victim)
        -:   40:{
        4:   41:   int damage = (rand() % 6) * weapon->impact * attacker->health / 100;
        4:   42:   if (damage < 0)
        -:   43:   {
        3:   44:      if (victim->health > 0)
        -:   45:      {
        3:   46:         describeAttack(attacker, victim, weapon);
        3:   47:         victim->health += damage;
        3:   48:         if (victim->health <= 0)
        -:   49:         {
    #####:   50:            victim->health = 0;
    #####:   51:            describeDeath(victim);
    #####:   52:         }
        3:   53:         if (attacker == player)
        -:   54:         {
        2:   55:            victim->trust--;
        2:   56:         }
        3:   57:      }
    #####:   58:      else if (attacker == player)
        -:   59:      {
    #####:   60:         printf("That will have little effect; %s is already dead.\n",
    #####:   61:                victim->description);
    #####:   62:      }
        3:   63:   }
        1:   64:   else if (attacker == player)
        -:   65:   {
    #####:   66:      printf("You try to hit %s with %s, but you miss.\n",
    #####:   67:             victim->description,
    #####:   68:             weapon == attacker ? "bare hands" : weapon->description);
    #####:   69:   }
        4:   70:}
        -:   71:
        4:   72:OBJECT *getOptimalWeapon(OBJECT *attacker)
        -:   73:{
        4:   74:   OBJECT *obj, *weapon = attacker;
      132:   75:   for (obj = objs; obj < endOfObjs; obj++)
        -:   76:   {
      128:   77:      if (isHolding(attacker, obj) && obj->impact < weapon->impact)
        -:   78:      {
        2:   79:         weapon = obj;
        2:   80:      }
      128:   81:   }
        4:   82:   return weapon;
        -:   83:}
